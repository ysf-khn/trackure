import React from "react";
import { Page, Text, View, Document, StyleSheet } from "@react-pdf/renderer";

// Define the expected props based on fetchVoucherData return type
// Adjust based on the actual VoucherData interface in fetch-voucher-data.ts
export interface VoucherData {
  itemId: string;
  itemName?: string; // Made optional
  orderNumber?: string; // Also make optional? Assuming it might be missing.
  customerName?: string; // Added, make optional
  stageName?: string; // Make optional?
  subStageName?: string; // Optional
  timestamp: string; // e.g., ISO string date
  instanceDetails?: any; // Add instanceDetails if needed
  notes?: string;
  // Add other relevant fields like quantity, SKU, user who actioned, etc.
}

interface VoucherTemplateProps {
  data: VoucherData;
}

// Create styles (can reuse/adapt styles from InvoiceTemplate)
const styles = StyleSheet.create({
  page: {
    flexDirection: "column",
    backgroundColor: "#FFFFFF",
    padding: 40,
    // fontFamily: 'Helvetica',
  },
  header: {
    fontSize: 20,
    marginBottom: 25,
    textAlign: "center",
    color: "grey",
    textTransform: "uppercase",
  },
  section: {
    marginBottom: 15,
  },
  subheading: {
    fontSize: 14,
    marginBottom: 8,
    // fontWeight: 'bold',
    textDecoration: "underline",
  },
  text: {
    fontSize: 11,
    marginBottom: 4,
  },
  label: {
    fontSize: 11,
    // fontWeight: 'bold',
    width: 120, // Adjust as needed for alignment
  },
  row: {
    flexDirection: "row",
    marginBottom: 5,
    alignItems: "center",
  },
  footer: {
    position: "absolute",
    bottom: 30,
    left: 40,
    right: 40,
    textAlign: "center",
    color: "grey",
    fontSize: 9,
  },
});

// Create Document Component
export const VoucherTemplate: React.FC<VoucherTemplateProps> = ({ data }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.header}>Item Voucher</Text>

      <View style={styles.section}>
        <Text style={styles.subheading}>Item Details</Text>
        <View style={styles.row}>
          <Text style={styles.label}>Item ID:</Text>
          <Text style={styles.text}>{data.itemId}</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.label}>Item Name:</Text>
          <Text style={styles.text}>{data.itemName ?? "N/A"}</Text>
        </View>
        <View style={styles.row}>
          <Text style={styles.label}>Order Number:</Text>
          <Text style={styles.text}>{data.orderNumber ?? "N/A"}</Text>
        </View>
        {data.customerName && (
          <View style={styles.row}>
            <Text style={styles.label}>Customer:</Text>
            <Text style={styles.text}>{data.customerName}</Text>
          </View>
        )}
      </View>

      <View style={styles.section}>
        <Text style={styles.subheading}>Status Information</Text>
        <View style={styles.row}>
          <Text style={styles.label}>Stage:</Text>
          <Text style={styles.text}>{data.stageName ?? "N/A"}</Text>
        </View>
        {data.subStageName && (
          <View style={styles.row}>
            <Text style={styles.label}>Sub-stage:</Text>
            <Text style={styles.text}>{data.subStageName}</Text>
          </View>
        )}
        <View style={styles.row}>
          <Text style={styles.label}>Timestamp:</Text>
          <Text style={styles.text}>
            {data.timestamp ? new Date(data.timestamp).toLocaleString() : "N/A"}
          </Text>
        </View>
      </View>

      {data.notes && (
        <View style={styles.section}>
          <Text style={styles.subheading}>Notes</Text>
          <Text style={styles.text}>{data.notes}</Text>
        </View>
      )}

      {data.instanceDetails && (
        <View style={styles.section}>
          <Text style={styles.subheading}>Instance Details</Text>
          <Text style={styles.text}>
            {JSON.stringify(data.instanceDetails)}
          </Text>
        </View>
      )}

      <Text style={styles.footer}>
        Generated by Trackure - {new Date().toLocaleDateString()}
      </Text>
    </Page>
  </Document>
);
